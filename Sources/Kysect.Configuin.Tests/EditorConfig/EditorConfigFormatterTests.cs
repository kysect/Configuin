using Kysect.Configuin.EditorConfig.DocumentModel;
using Kysect.Configuin.EditorConfig.DocumentModel.Nodes;
using Kysect.Configuin.EditorConfig.Formatter;
using Kysect.Configuin.Learn;
using Kysect.Configuin.RoslynModels;
using Kysect.Configuin.Tests.Tools;

namespace Kysect.Configuin.Tests.EditorConfig;

public class EditorConfigFormatterTests
{
    private readonly EditorConfigFormatter _formatter;
    private readonly EditorConfigDocumentParser _parser;
    private readonly LearnDocumentationParser _learnDocumentationParser;

    public EditorConfigFormatterTests()
    {
        _formatter = new EditorConfigFormatter();
        _parser = new EditorConfigDocumentParser();
        _learnDocumentationParser = new LearnDocumentationParser(TestImplementations.GetTextExtractor(), TestLogger.ProviderForTests());
    }

    [Fact]
    public void Format_OrderedIdeRulesWithoutHeader_HeaderAdded()
    {
        var input = """
                    first = value
                    dotnet_diagnostic.IDE0081.severity = none
                    dotnet_diagnostic.IDE0080.severity = none
                    dotnet_diagnostic.IDE0082.severity = warning
                    second = value
                    """;

        var expected = """
                       first = value
                       second = value
                       # Autogenerated values
                       [*.cs]
                       ### IDE ###
                       dotnet_diagnostic.IDE0080.severity = none
                       dotnet_diagnostic.IDE0081.severity = none
                       dotnet_diagnostic.IDE0082.severity = warning
                       """;

        FormatAndCompare(input, expected);
    }

    [Fact]
    public void Format_QualityAndStyleRulesMashed_ReturnOrderedLinesWithHeader()
    {
        var input = """
                    first = value
                    dotnet_diagnostic.IDE0081.severity = none
                    dotnet_diagnostic.CA2001.severity = none
                    second = value
                    dotnet_diagnostic.IDE0080.severity = none
                    dotnet_diagnostic.CA2000.severity = warning
                    """;

        var expected = """
                       first = value
                       second = value
                       # Autogenerated values
                       [*.cs]
                       ### IDE ###
                       dotnet_diagnostic.IDE0080.severity = none
                       dotnet_diagnostic.IDE0081.severity = none
                       ### CA ###
                       dotnet_diagnostic.CA2000.severity = warning
                       dotnet_diagnostic.CA2001.severity = none
                       """;

        FormatAndCompare(input, expected);
    }

    [Fact]
    public void Format_NamingRule_ReturnOrderedLinesWithHeader()
    {
        var input = """
                    dotnet_naming_style.camel_case_style.capitalization = camel_case
                    dotnet_diagnostic.IDE0081.severity = none
                    dotnet_naming_style.disallowed_style.capitalization  = pascal_case
                    dotnet_diagnostic.IDE1006.severity = none
                    dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
                    """;

        var expected = """
                       # Autogenerated values
                       [*.cs]
                       ### IDE ###
                       dotnet_diagnostic.IDE0081.severity = none
                       dotnet_diagnostic.IDE1006.severity = none
                       dotnet_naming_style.camel_case_style.capitalization = camel_case
                       dotnet_naming_style.disallowed_style.capitalization  = pascal_case
                       dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style      = pascal_case_style
                       """;

        RoslynRules roslynRules = _learnDocumentationParser.Parse(Constants.GetPathToMsDocsRoot());

        EditorConfigDocument editorConfigDocument = _parser.Parse(input);
        EditorConfigDocument formattedDocument = _formatter.FormatAccordingToRuleDefinitions(editorConfigDocument, roslynRules, false);

        formattedDocument.ToFullString().Should().Be(expected);
    }

    [Fact]
    public void Format_QualityRuleByCategory_ReturnGroupedByCategory()
    {
        var input = """
                    dotnet_diagnostic.CA1016.severity = none
                    dotnet_diagnostic.CA1027.severity = none
                    dotnet_diagnostic.CA1501.severity = none
                    dotnet_diagnostic.CA1835.severity = none
                    """;

        var expected = """
                       # Autogenerated values
                       [*.cs]
                       ### CA Design ###
                       dotnet_diagnostic.CA1016.severity = none
                       dotnet_diagnostic.CA1027.severity = none
                       ### CA Maintainability ###
                       dotnet_diagnostic.CA1501.severity = none
                       ### CA Performance ###
                       dotnet_diagnostic.CA1835.severity = none
                       """;

        RoslynRules roslynRules = _learnDocumentationParser.Parse(Constants.GetPathToMsDocsRoot());

        EditorConfigDocument editorConfigDocument = _parser.Parse(input);
        EditorConfigDocument formattedDocument = _formatter.FormatAccordingToRuleDefinitions(editorConfigDocument, roslynRules, true);

        formattedDocument.ToFullString().Should().Be(expected);
    }

    [Fact(Skip = "Test is not work during CI. Need to rewrite it without reading and comparing huge .ini files")]
    public void FormatAccordingToRuleDefinitions_Sample_ReturnExpectedFormatterDocument()
    {
        string input = File.ReadAllText(Path.Combine("Resources", "Editor-config-sample.ini"));
        // TODO: Do smth with this =_=
        string expected = File.ReadAllText(Path.Combine("Resources", "Editor-config-sample-formatted.ini"))
            .Replace("\r\n", "\n")
            .Replace("\n", Environment.NewLine);

        RoslynRules roslynRules = _learnDocumentationParser.Parse(Constants.GetPathToMsDocsRoot());

        EditorConfigDocument editorConfigDocument = _parser.Parse(input);
        EditorConfigDocument formattedDocument = _formatter.FormatAccordingToRuleDefinitions(editorConfigDocument, roslynRules, false);
        // TODO: Do smth with this =_=

        formattedDocument.ToFullString()
            .Replace("\r\n", "\n")
            .Replace("\n", Environment.NewLine)
            .Should().Be(expected);
    }

    private void FormatAndCompare(string input, string expected)
    {
        EditorConfigDocument editorConfigDocument = _parser.Parse(input);
        EditorConfigDocument formattedDocument = _formatter.Format(editorConfigDocument);
        formattedDocument.ToFullString().Should().Be(expected);
    }
}
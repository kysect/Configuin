using Kysect.CommonLib.Collections.Extensions;
using Kysect.Configuin.EditorConfig.DocumentModel;
using Kysect.Configuin.EditorConfig.DocumentModel.Nodes;
using Kysect.Configuin.EditorConfig.Settings;
using Kysect.Configuin.RoslynModels;

namespace Kysect.Configuin.EditorConfig.Formatter;

public class EditorConfigFormatter
{
    private readonly DotnetConfigSettingsParser _settingsParser;

    public EditorConfigFormatter(DotnetConfigSettingsParser settingsParser)
    {
        _settingsParser = settingsParser;
    }

    public EditorConfigDocument Format(EditorConfigDocument value)
    {
        List<EditorConfigPropertyNode> nodesForRemoving = new List<EditorConfigPropertyNode>();
        IReadOnlyCollection<EditorConfigPropertyNode> styleRuleNodesForMoving = SelectIdeNodes(value, RoslynRuleType.StyleRule);
        IReadOnlyCollection<EditorConfigPropertyNode> qualityRuleNodesForMoving = SelectIdeNodes(value, RoslynRuleType.QualityRule);
        nodesForRemoving.AddRange(styleRuleNodesForMoving);
        nodesForRemoving.AddRange(qualityRuleNodesForMoving);

        if (nodesForRemoving.IsEmpty())
            return value;

        value = value.RemoveNodes(nodesForRemoving);
        var autoGeneratedSection = new EditorConfigCategoryNode("*.cs", [], ["# Autoformatted values"], null);

        if (styleRuleNodesForMoving.Any())
        {
            var styleRuleSection = new EditorConfigDocumentSectionNode("### IDE ###");

            styleRuleNodesForMoving = styleRuleNodesForMoving.OrderBy(r => r.Key.Value).ToList();
            foreach (EditorConfigPropertyNode styleRule in styleRuleNodesForMoving)
                styleRuleSection = styleRuleSection.AddChild(styleRule);

            autoGeneratedSection = autoGeneratedSection.AddChild(styleRuleSection);
        }

        if (qualityRuleNodesForMoving.Any())
        {
            var qualitySection = new EditorConfigDocumentSectionNode("### CA ###");

            qualityRuleNodesForMoving = qualityRuleNodesForMoving.OrderBy(r => r.Key.Value).ToList();
            foreach (EditorConfigPropertyNode qualityRule in qualityRuleNodesForMoving)
                qualitySection = qualitySection.AddChild(qualityRule);

            autoGeneratedSection = autoGeneratedSection.AddChild(qualitySection);
        }

        value = value.AddChild(autoGeneratedSection);

        return value;
    }

    public IReadOnlyCollection<EditorConfigPropertyNode> SelectIdeNodes(EditorConfigDocument document, RoslynRuleType roslynRuleType)
    {
        List<EditorConfigPropertyNode> propertyNodes = document
            .DescendantNodes()
            .OfType<EditorConfigPropertyNode>()
            .ToList();

        List<EditorConfigPropertyNode> styleRuleNodes = new List<EditorConfigPropertyNode>();
        foreach (EditorConfigPropertyNode editorConfigPropertyNode in propertyNodes)
        {
            IEditorConfigSetting editorConfigSetting = _settingsParser.ParseSetting(editorConfigPropertyNode);
            if (editorConfigSetting is not RoslynSeverityEditorConfigSetting severityConfigSetting)
                continue;

            if (severityConfigSetting.RuleId.Type == roslynRuleType)
                styleRuleNodes.Add(editorConfigPropertyNode);
        }

        return styleRuleNodes;
    }
}